@page "/search"
@using BadgeFed.Models
@inject LocalDbService LocalDbService
@layout BadgeFed.Components.Layouts.MainLayout
@rendermode InteractiveServer

<h1 class="title">Find Your Badges</h1>

<form @onsubmit="SearchBadges" @onsubmit:preventDefault style="max-width: 500px; margin-bottom: 1.5rem;">
  <div class="field has-addons is-expanded">
    <div class="control is-expanded">
      <input 
        class="input" 
        type="text" 
        placeholder="Search by name, fediverse handle, or profile URL..." 
        @bind="searchText"
        aria-label="Search badges"
        required
      />
    </div>
    <div class="control">
      <button class="button is-info" type="submit">
        <span class="icon">
          <i class="fas fa-search"></i>
        </span>
        <span>Search</span>
      </button>
    </div>
  </div>
</form>


@if (isLoading)
{
    <div class="notification is-info">Loading...</div>
}
else if (string.IsNullOrEmpty(searchText) && !searchSubmitted)
{
    <div class="notification is-warning">Please enter a name or profile URL to search for badges.</div>
} else if (badgeRecords == null || !badgeRecords.Any())
{
    <div class="notification is-warning">No badges found for this recipient.</div>
}
else
{
    <div class="table-container">
        <table class="table is-fullwidth is-striped is-hoverable">
            <thead>
                <tr>
                    <th>Title</th>
                    <th>Issued By</th>
                    <th>Issued On</th>
                    <th>Issued To</th>
                    <th>Accepted On</th>
                    <th>Is External</th>
                    <th>View</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var record in badgeRecords)
                {
                    var actor = LocalDbService.GetActorByFilter($"Uri = '{record.IssuedBy}'");
                    <tr>
                        <td>@record.Title</td>
                        <td><a href="@actor?.Uri">@(actor?.FullName ?? record.IssuedBy)</a></td>
                        <td>@record.IssuedOn.ToString("yyyy-MM-dd")</td>
                        <td><a href="@record.IssuedToSubjectUri">@(record.IssuedToName ?? record.IssuedToSubjectUri)</a></td>
                        <td>@(record.AcceptedOn?.ToString("yyyy-MM-dd") ?? "-")</td>
                        <td>@(record.IsExternal ? "Yes" : "No")</td>
                        <td>
                            @if (!string.IsNullOrEmpty(record.NoteId))
                            {
                                if (record.IsExternal)
                                {
                                    var noteIdParam = record.NoteId.Substring(record.NoteId.LastIndexOf('/') + 1);
                                    <a class="button is-small is-info" href="/view/grant/@noteIdParam">View</a>
                                }
                                else
                                {
                                    <a class="button is-small is-info" href="@record.NoteId">View</a>
                                }
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private string searchText = string.Empty;
    private List<BadgeRecord> badgeRecords;
    private bool isLoading = false;

    private bool searchSubmitted = false;

    protected override void OnInitialized()
    {
        badgeRecords = new List<BadgeRecord>();
    }

    private void SearchBadges()
    {
        if (searchText.Length < 3)
        {
            badgeRecords = new List<BadgeRecord>();
            return;
        }

        isLoading = true;
        var filter = $@"
            FingerPrint IS NOT NULL AND NoteId IS NOT NULL AND AND Visibility = 'Public' AND
            (LOWER(IssuedToName) LIKE '%{searchText.ToLower()}%' OR LOWER(IssuedToSubjectUri) LIKE '%{searchText.ToLower()}%')
        ";
        badgeRecords = LocalDbService.GetBadgeRecords(filter);
        isLoading = false;
        searchSubmitted = true;

        StateHasChanged();        
    }
} 