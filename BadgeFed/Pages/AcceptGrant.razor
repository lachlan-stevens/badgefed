@page "/accept/grant/{id}/{key}"
@using ActivityPubDotNet.Core
@using System.Text.Json
@inject NavigationManager NavManager
@inject LocalDbService DbService
@using BadgeFed.Models
@inject HttpClient HttpClient

@if (BadgeRecord == null)
{
    <div class="has-text-centered">
        <p>Badge record not found or was already accepted.</p>
    </div>
}
else
{
<div class="notification is-link has-text-centered mb-5">
    <h4 class="title is-3 has-text-weight-bold">
        <span class="icon has-text-white">
            <i class="oi oi-star"></i>
        </span> 
        Congratulations!
    </h4>
    <p class="subtitle is-5 has-text-white">You've earned this @Badge.BadgeType. Accept it to add it to your collection.</p>
</div>
<div class="card" style="max-width: 600px; margin: 0 auto; box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1); border-radius: 8px;">
    <div class="card-header has-text-centered" style="background-color: #f7f7f7; border-bottom: 1px solid #ddd;">
        <div class="card-header-title is-centered">
            <img src="@BadgeRecord.Image" alt="@BadgeRecord.Title" class="image is-128x128" style="border-radius: 8px;"/>
        </div>
    </div>
    <div class="card-content">
        <h4 class="title is-4 has-text-centered has-text-weight-semibold">@BadgeRecord.Title</h4>
        <div class="content">
            <p class="mb-2"><strong>Issued By:</strong> <a href="@Actor.Uri" class="has-text-link">@Actor.FullName</a></p>
            <p class="mb-2"><strong>Description:</strong> @BadgeRecord.Description</p>
            <p class="mb-2"><strong>Earning Criteria:</strong> @BadgeRecord.EarningCriteria</p>
            <p class="mb-2"><strong>Issued On:</strong> @BadgeRecord.IssuedOn.ToShortDateString()</p>
        </div>
    </div>
 <div class="card-content">
    <!-- Form Section -->
    <form @onsubmit="HandleValidSubmit" method="post">
        <div class="notification is-warning mb-4">
            <p><strong>Note:</strong> The following information will be permanently associated with this badge once accepted. Please ensure all details are correct.</p>
        </div>

        <!-- Profile URI Input -->
        <div class="field mb-3">
            <label class="label" for="profileUri">Profile URI:</label>
            <div class="control">
                <input type="url" id="profileUri" class="input is-rounded" @bind="Model.ProfileUri" placeholder="e.g., https://mastodon.social/@@username" />
            </div>
            <p class="help is-info">
                Enter your profile URL (e.g., https://mastodon.social/@@username, https://linkedin/in/username).
            </p>
            <div class="control mt-2">
                <button class="button is-outlined is-primary is-rounded" @onclick="ValidateProfileUrl" type="button">Validate</button>
            </div>
            <p class="help is-info">
                @ValidationProfileMessage
            </p>
        </div>

        <!-- Full Name Input -->
        <div class="field mb-3">
            <label class="label" for="fullName">Full Name:</label>
            <div class="control">
                <input type="text" id="fullName" class="input is-rounded" @bind="Model.Name" required placeholder="Enter your full name"/>
            </div>
        </div>

        <!-- Email Input -->
        <div class="field mb-3">
            <label class="label" for="email">Email:</label>
            <div class="control">
                <input type="email" id="email" class="input is-rounded" @bind="Model.Email" required placeholder="Enter your email address"/>
            </div>
        </div>

        <!-- Certification Checkbox -->
        <div class="field mt-4 mb-3">
            <div class="control">
                <label class="checkbox">
                    <input type="checkbox" id="certifyCheck" @bind="certificationCompleted" />
                    By checking this box I certify I completed the earning criteria.
                </label>
            </div>
        </div>

        <!-- Submit Button -->
        <div class="field">
            <div class="control">
                <button type="submit" class="button is-primary is-fullwidth is-medium is-rounded">Accept Badge</button>
            </div>
        </div>
    </form></div>
</div>

}

@code 
{
    [Parameter] public string Id { get; set; }
    [Parameter] public string Key { get; set; }

    public Recipient? Model = new();

    public BadgeRecord BadgeRecord;

    private bool certificationCompleted;

    public Badge Badge;

    public Actor Actor;

    public string ValidationProfileMessage { get; set; }

    public async Task ValidateProfileUrl()
    {
        ValidationProfileMessage = "Checking ...";

        if (string.IsNullOrWhiteSpace(Model.ProfileUri))
        {
            ValidationProfileMessage = "Profile URI is required.";
            return;
        }

        // check if it starts as https://
        if (!Model.ProfileUri.StartsWith("https://"))
        {
            ValidationProfileMessage = "Profile URI must start with https://";
            return;
        }

        // check if it is a valid URL
        if (!Uri.TryCreate(Model.ProfileUri, UriKind.Absolute, out _))
        {
            ValidationProfileMessage = "Invalid URL.";
            return;
        }


        try
        {
            // send custom headers
            HttpClient.DefaultRequestHeaders.Add("User-Agent", "BadgeFed/1.0");
            HttpClient.DefaultRequestHeaders.Add("Accept", "application/ld+json");

            // Try to fetch the URL to verify it exists
            var response = await HttpClient.GetAsync(Model.ProfileUri);

            if (response.IsSuccessStatusCode)
            {
                ValidationProfileMessage = "✓ Valid URL";

                 // Check for ActivityPub / JSON-LD content
                var contentType = response.Content.Headers.ContentType?.MediaType;

                if (contentType != null && 
                    (contentType.Contains("application/ld+json") || 
                    contentType.Contains("application/activity+json")))
                {
                    Model.IsActivityPubActor = true;
                    ValidationProfileMessage += "✓ ActivityPub endpoint.";
                }

                var content = await response.Content.ReadAsStringAsync();

                // Try to parse the content as ActivityPub actor
                try 
                {
                    var contentObj = JsonDocument.Parse(content);
                    var root = contentObj.RootElement;

                    Console.WriteLine(content);
                                    
                    // Check if this looks like an ActivityPub actor
                    if (root.TryGetProperty("type", out var typeElement) && 
                        (typeElement.GetString()?.Equals("Person", StringComparison.OrdinalIgnoreCase) == true ||
                         typeElement.GetString()?.Equals("Organization", StringComparison.OrdinalIgnoreCase) == true ||
                         typeElement.GetString()?.Equals("Service", StringComparison.OrdinalIgnoreCase) == true ||
                         typeElement.GetString()?.Equals("Application", StringComparison.OrdinalIgnoreCase) == true))
                    {
                        Console.WriteLine(typeElement);
                        Model.IsActivityPubActor = true;

                        // Get name if available
                        if (root.TryGetProperty("name", out var nameElement) && nameElement.ValueKind == JsonValueKind.String)
                        {
                            var actorName = nameElement.GetString();

                            if (!string.IsNullOrEmpty(actorName))
                            {
                                Model.Name = actorName;
                                ValidationProfileMessage += " ✓ Name autofilled from profile.";
                            }
                        }
                        // Try to get preferredUsername as fallback
                        else if (root.TryGetProperty("preferredUsername", out var usernameElement) && 
                                 usernameElement.ValueKind == JsonValueKind.String)
                        {
                            var username = usernameElement.GetString();
                            if (!string.IsNullOrEmpty(username))
                            {
                                Model.Name = username;
                                ValidationProfileMessage += " ✓ Name autofilled from profile.";
                            }
                        }
                    }
                }
                catch (JsonException)
                {
                    // Not valid JSON or JSON-LD, continue with other checks
                }
            }
            else
            {
                ValidationProfileMessage = $"URL returned status code {(int)response.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            ValidationProfileMessage = $"Error: {ex.Message}";
        }
    }

    public async Task HandleValidSubmit()
    {
        if (!certificationCompleted)
        {
            return;
        }

        DbService.UpsertRecipient(Model);

        var issuedTo = Model.ProfileUri; //Model.IsActivityPubActor ? : $"https://{Actor.Domain}/recipients/{Actor.Domain}/{Model.Id}";

        BadgeRecord.IssuedToName = Model.Name;
        BadgeRecord.IssuedToSubjectUri = issuedTo;
        BadgeRecord.IssuedToEmail = string.Empty;

        DbService.AcceptBadgeRecord(BadgeRecord);

        NavManager.NavigateTo("/");
    }

    protected override async Task OnInitializedAsync()
    {
        var id = long.Parse(Id);
        var record = DbService.GetBadgeToAccept(id, Key);

        if (record == null)
        {
            // Badge record not found, redirect to error page or show message
            return;
        }

        Model = DbService.GetRecipientByIssuedTo(record);
Console.WriteLine(JsonSerializer.Serialize(record));
        Console.WriteLine(JsonSerializer.Serialize(Model));

        Badge = DbService.GetBadgeDefinitionById(record.Badge.Id);

        Actor = DbService.GetActorById(Badge.IssuedBy);

        BadgeRecord = record;
    }
}