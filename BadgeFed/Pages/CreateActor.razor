@page "/admin/actors/create"
@using System.IO
@using Microsoft.AspNetCore.Hosting
@using Microsoft.AspNetCore.Components.Forms
@inject IWebHostEnvironment Environment
@inject NavigationManager NavigationManager
@inject LocalDbService LocalDbService
@inject IConfiguration Configuration

@layout BadgeFed.Components.AdminLayout

<h1>Create New Actor</h1>
<div class="columns">
    <div class="column is-half">
        <div class="box">
            <EditForm Model="Model" OnValidSubmit="HandleValidSubmit" FormName="actorForm">
                <DataAnnotationsValidator />
                <ValidationSummary />
                
                <div class="field">
                    <label class="label" for="name">Full Name</label>
                    <div class="control">
                        <InputText id="name" @bind-Value="Model!.FullName" class="input" />
                    </div>
                    <ValidationMessage For="@(() => Model.FullName)" class="help is-danger" />
                </div>

                <div class="field">
                    <label class="label" for="summary">Summary</label>
                    <div class="control">
                        <InputTextArea id="summary" @bind-Value="Model.Summary" class="textarea" rows="4" />
                    </div>
                    <ValidationMessage For="@(() => Model.Summary)" class="help is-danger" />
                </div>

                <div class="field">
                    <label class="label" for="avatar">Avatar</label>
                    <div class="control">
                        <div class="file has-name">
                            <label class="file-label">
                                <InputFile id="avatar" OnChange="HandleFileSelection" accept="image/*" class="file-input" />
                                <span class="file-cta">
                                    <span class="file-icon">
                                        <i class="fas fa-upload"></i>
                                    </span>
                                    <span class="file-label">Choose a fileâ€¦</span>
                                </span>
                                <span class="file-name">@(selectedFile?.Name ?? "No file selected")</span>
                            </label>
                        </div>
                    </div>
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <p class="help is-danger">@errorMessage</p>
                    }
                    @if (imagePreview != null)
                    {
                        <div class="mt-3">
                            <img src="@imagePreview" alt="Avatar Preview" style="max-width: 200px; max-height: 200px;" />
                        </div>
                    }
                </div>

                <div class="field">
                    <label class="label" for="username">Username</label>
                    <div class="control">
                        <InputText id="username" @bind-Value="Model!.Username" class="input" />
                    </div>
                    <ValidationMessage For="@(() => Model.Username)" class="help is-danger" />
                </div>

                <div class="field">
                    <label class="label" for="informationUri">Information URI</label>
                    <div class="control">
                        <InputText id="informationUri" @bind-Value="Model!.InformationUri" class="input" />
                    </div>
                    <ValidationMessage For="@(() => Model.InformationUri)" class="help is-danger" />
                </div>

                <div class="field">
                    <label class="label" for="domain">Domain</label>
                    <div class="control">
                        <div class="select is-fullwidth">
                            <InputSelect id="domain" @bind-Value="Model!.Domain">
                                <option value="">-- Select a domain --</option>
                                @foreach (var domain in availableDomains)
                                {
                                    <option value="@domain">@domain</option>
                                }
                            </InputSelect>
                        </div>
                    </div>
                    <ValidationMessage For="@(() => Model.Domain)" class="help is-danger" />
                </div>

                <div class="field">
                    <label class="label" for="public-key">PublicKey</label>
                    <div class="control">
                        <InputTextArea id="public-key" @bind-Value="Model.PublicKeyPem" class="textarea" rows="6" />
                    </div>
                </div>

                <div class="field">
                    <label class="label" for="private-key">PrivateKey</label>
                    <div class="control">
                        <InputTextArea id="private-key" @bind-Value="Model.PrivateKeyPem" class="textarea" rows="6" />
                    </div>
                </div>

                <div class="field is-grouped mt-4">
                    <div class="control">
                        <button type="submit" class="button is-primary" disabled="@isSubmitting">
                            @if (isSubmitting)
                            {
                                <span class="icon is-small">
                                    <i class="fas fa-spinner fa-spin"></i>
                                </span>
                                <span>Creating...</span>
                            }
                            else
                            {
                                <span>Create Actor</span>
                            }
                        </button>
                    </div>
                    <div class="control">
                        <button type="button" @onclick="ClearForm" class="button is-light">Clear form</button>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private Actor? Model = new();

    private IBrowserFile? selectedFile;
    private string? imagePreview;
    private string? errorMessage;
    private bool isSubmitting = false;

    private List<string> availableDomains = []; 

    protected override void OnInitialized()
    {
        availableDomains = Configuration.GetSection("BadgesDomains").Get<string[]>().ToList();
        
        Model ??= new();
    }

    private void ClearForm() => Model = new();

    private async Task HandleFileSelection(InputFileChangeEventArgs e)
    {
        errorMessage = null;
        selectedFile = e.File;
        
        if (selectedFile.Size > 2 * 1024 * 1024) // 2MB limit
        {
            errorMessage = "File size exceeds 2MB limit.";
            selectedFile = null;
            return;
        }

        var format = "image/jpeg";
        var resizedImage = await selectedFile.RequestImageFileAsync(format, 300, 300);
        var buffer = new byte[resizedImage.Size];
        await resizedImage.OpenReadStream().ReadAsync(buffer);
        
        imagePreview = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
    }

    private async Task HandleValidSubmit()
    {
        isSubmitting = true;
        try
        {
            if (selectedFile != null)
            {
                var fileName = $"{Guid.NewGuid()}{Path.GetExtension(selectedFile.Name)}";
                var path = Path.Combine(Environment.WebRootPath, "uploads", "avatars");
                
                // Ensure directory exists
                Directory.CreateDirectory(path);
                
                var fullPath = Path.Combine(path, fileName);
                
                using var stream = selectedFile.OpenReadStream();
                using var fileStream = new FileStream(fullPath, FileMode.Create);
                await stream.CopyToAsync(fileStream);
                
                Model.AvatarPath = $"/uploads/avatars/{fileName}";
            }
            
            // TODO: Save actor to database
            LocalDbService.UpsertActor(Model);
            
            // Redirect to actors list or details page
            NavigationManager.NavigateTo("/admin/actors");
            
            // For demo purposes, just reset the form
            Model = new();

            selectedFile = null;
            imagePreview = null;


        }
        catch (Exception ex)
        {
            errorMessage = $"Error creating actor: {ex.Message}";
        }
        finally
        {
            isSubmitting = false;
        }
    }
}