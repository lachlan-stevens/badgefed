@page "/view/actor/{domain}/{username}"

@inject IHttpContextAccessor HttpContextAccessor
@inject NavigationManager NavManager
@inject LocalDbService DbService

@if (isLoading)
{
    <div class="section">
        <div class="container has-text-centered">
            <p class="is-size-5">Loading actor details...</p>
            <progress class="progress is-primary" max="100"></progress>
        </div>
    </div>
}
else if (actor == null)
{
    <div class="section">
        <div class="container">
            <div class="notification is-warning">
                <p class="has-text-centered">Actor not found.</p>
            </div>
        </div>
    </div>
}
else
{
    <div class="section">
        <div class="container">
            <div class="box">
                <div class="columns">
                    <div class="column is-one-quarter">
                        @if (!string.IsNullOrEmpty(actor.AvatarPath))
                        {
                            <figure class="image is-128x128 mb-4">
                                <img class="is-rounded" src="@actor.AvatarPath" alt="@actor.FullName" />
                            </figure>
                        }
                        else
                        {
                            <figure class="image is-128x128 mb-4">
                                <div class="has-background-grey-lighter is-rounded" style="width: 128px; height: 128px; display: flex; align-items: center; justify-content: center;">
                                    <span class="icon is-large"><i class="fas fa-user fa-2x"></i></span>
                                </div>
                            </figure>
                        }
                    </div>
                    <div class="column">
                        <h2 class="title is-3">@actor.FullName</h2>
                        <p class="subtitle is-5 mb-3">@actor.Summary</p>
                        
                        <div class="tags">
                            <span class="tag is-medium is-info">@actor.Domain</span>
                        </div>
                        
                        <div class="mt-4">
                            <a href="@actor.InformationUri" target="_blank" class="button is-link is-outlined">
                                <span class="icon"><i class="fas fa-external-link-alt"></i></span>
                                <span>More Information</span>
                            </a>
                        </div>
                    </div>
                </div>
            </div>

            <div class="box mt-5">
                <h3 class="title is-4">
                    <span class="icon-text">
                        <span class="icon"><i class="fas fa-users"></i></span>
                        <span>Followers</span>
                    </span>
                    <span class="tag is-rounded is-info ml-2">@followers.Count</span>
                </h3>
                
                @if (followers.Count == 0)
                {
                    <div class="notification is-light">
                        <p>No followers yet.</p>
                    </div>
                }
                else
                {
                    <div class="content">
                        <ul class="followers-list">
                            @foreach (var follower in followers)
                            {
                                <li class="mb-2">
                                    <div class="box p-3">
                                        <span class="has-text-weight-medium">@follower.FollowerUri</span>
                                        <span class="tag is-light is-small ml-2">@follower.Domain</span>
                                    </div>
                                </li>
                            }
                        </ul>
                    </div>
                }
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public string? Domain { get; set; }
    [Parameter] public string? Username { get; set; }

    private Actor? actor;
    private List<Follower> followers = new();
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        var acceptHeader = HttpContextAccessor.HttpContext?.Request.Headers["Accept"].ToString();

        if (BadgeFed.Core.ActivityPubHelper.IsActivityPubRequest(acceptHeader))
        {
            NavManager.NavigateTo($"/actors/{Domain}/{Username}");
        }

         LoadData();
    }

    private void LoadData()
    {
        actor = DbService.GetActorByFilter($"Username = \"{Username}\" AND Domain = \"{Domain}\"");
        
        if (actor != null)
        {
            followers = DbService.GetFollowersByActorId(actor.Id);
        }
        
        isLoading = false;
    }
}