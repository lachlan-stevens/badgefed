@page "/admin/settings/general"

@using BadgeFed.Models

@inject NavigationManager NavigationManager
@inject IWebHostEnvironment Environment
@inject LocalDbService LocalDbService
@rendermode InteractiveServer

@layout BadgeFed.Components.Layouts.AdminLayout

@attribute [Authorize(Roles = "Admin, Superuser")]

<h3>General Settings</h3>
<div class="mt-4">
    <h4>Database Management</h4>
    <p>Click the button below to download your entire database.</p>
    <button class="btn btn-primary" @onclick="DownloadDatabase">Download DB</button>
    @if (DatabaseSize.HasValue)
    {
        <p>Database Size: @DatabaseSize.Value.ToString("N2") MB</p>
    }
    else
    {
        <p>Calculating database size...</p>
    }
</div>

<div class="mt-4">
    <h4>Custom SQL</h4>
    <p>Execute custom SQL queries below. Use with caution.</p>
    <textarea @bind="SqlQuery" class="form-control" rows="6" placeholder="Enter your SQL query here..."></textarea>
    <div class="mt-2">
        <button class="btn btn-warning" @onclick="ExecuteSql">Execute Command</button>
        <button class="btn btn-warning" @onclick="ExecuteSqlQuery">Execute Query</button>
    </div>
    @if (!string.IsNullOrEmpty(SqlResult))
    {
        <div class="mt-3 p-3 bg-light">
            <pre>@SqlResult</pre>
        </div>
    }
    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="mt-3 p-3 bg-danger text-white">
            <strong>Error:</strong> @ErrorMessage
        </div>
    }
    <p class="mt-2">Note: Executing SQL directly can modify or delete data. Ensure you have backups.</p>
</div>

<div class="mt-4">
    <h4>Custom Logo</h4>
    <p>Upload a custom logo to replace the default. <strong>File must be PNG</strong> and will be saved as <code>logo.h.png</code>. The filename cannot be changed.</p>
    <InputFile OnChange="OnLogoFileSelected" accept=".png" />
    <button class="btn btn-success mt-2" @onclick="UploadLogo" disabled="@(SelectedLogoFile == null)">Upload Logo</button>
    @if (!string.IsNullOrEmpty(LogoUploadMessage))
    {
        <div class="mt-2 p-2 bg-info text-dark">
            @LogoUploadMessage
        </div>
    }
    @if (!string.IsNullOrEmpty(LogoUploadError))
    {
        <div class="mt-2 p-2 bg-danger text-white">
            <strong>Error:</strong> @LogoUploadError
        </div>
    }
</div>

<div class="mt-4">
    <h4>Custom CSS</h4>
    <p>Edit custom CSS directly to override styles. Changes will be saved as <code>custom.css</code> in <code>wwwroot/css/</code>.</p>
    <textarea @bind="CustomCssContent" class="form-control" rows="10" placeholder="Enter your custom CSS here..."></textarea>
    <div class="mt-2">
        <button class="btn btn-success" @onclick="SaveCss">Save CSS</button>
        <button class="btn btn-secondary" @onclick="ReloadCss">Reload CSS</button>
    </div>
    @if (!string.IsNullOrEmpty(CssMessage))
    {
        <div class="mt-2 p-2 bg-info text-dark">
            @CssMessage
        </div>
    }
    @if (!string.IsNullOrEmpty(CssError))
    {
        <div class="mt-2 p-2 bg-danger text-white">
            <strong>Error:</strong> @CssError
        </div>
    }
</div>

@code {

    private string SqlQuery { get; set; }
    private string SqlResult { get; set; }
    private string ErrorMessage { get; set; }
    private double? DatabaseSize { get; set; } = null;

    private IBrowserFile SelectedLogoFile { get; set; }
    private string LogoUploadMessage { get; set; }
    private string LogoUploadError { get; set; }

    private string CustomCssContent { get; set; } = string.Empty;
    private string CssMessage { get; set; }
    private string CssError { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await CalculateDatabaseSize();
        await LoadCustomCss();
    }

    private async Task CalculateDatabaseSize()
    {
        var dbPath = "prod.db"; // Assuming your database is in the root.  Adjust if not.
        if (File.Exists(dbPath))
        {
            var fileInfo = new FileInfo(dbPath);
            DatabaseSize = fileInfo.Length / (1024.0 * 1024.0); // Convert to MB
        }
        else
        {
            ErrorMessage = "Database file not found!";
            DatabaseSize = 0;
        }

        await InvokeAsync(StateHasChanged);
    }

    private void ExecuteSql()
    {
        try
        {
            // Assuming LocalDbService has a method to execute SQL and return results as string
            LocalDbService.ExecuteSql(SqlQuery);

            SqlResult = "SQL executed successfully.";
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error executing SQL: {ex.Message}";
        }
    }

    private void ExecuteSqlQuery()
    {
        try
        {
            // Assuming LocalDbService has a method to execute SQL and return results as string
            var listItems = LocalDbService.ExecuteSqlQuery(SqlQuery);

            SqlResult = System.Text.Json.JsonSerializer.Serialize(listItems, new System.Text.Json.JsonSerializerOptions { WriteIndented = true });
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error executing SQL: {ex.Message}";
        }
    }

    private void DownloadDatabase()
    {
        // Example endpoint or a direct link to the DB file
        // Get current datetime for filename suffix
        var timestamp = DateTime.Now.ToString("yyyyMMdd_HHmmss");
        var sourceFile = "prod.db";
        var destinationFolder = "wwwroot/db/";
        var destinationFile = $"{destinationFolder}backup_{timestamp}.db";

        // Ensure directory exists
        Directory.CreateDirectory(destinationFolder);

        // Copy the database file
        File.Copy(sourceFile, destinationFile, true);

        // Navigate to the file for download
        NavigationManager.NavigateTo($"/db/backup_{timestamp}.db", true);
    }

    private void OnLogoFileSelected(InputFileChangeEventArgs e)
    {
        LogoUploadMessage = null;
        LogoUploadError = null;
        var file = e.File;
        if (file != null)
        {
            if (Path.GetExtension(file.Name).ToLower() != ".png")
            {
                LogoUploadError = "Only PNG files are allowed.";
                SelectedLogoFile = null;
            }
            else
            {
                SelectedLogoFile = file;
            }
        }
    }

    private async Task UploadLogo()
    {
        LogoUploadMessage = null;
        LogoUploadError = null;
        if (SelectedLogoFile == null)
        {
            LogoUploadError = "No file selected.";
            return;
        }
        if (Path.GetExtension(SelectedLogoFile.Name).ToLower() != ".png")
        {
            LogoUploadError = "Only PNG files are allowed.";
            return;
        }
        try
        {
            var logoPath = Path.Combine(Environment.WebRootPath, "logo.h.png");
            using (var stream = SelectedLogoFile.OpenReadStream(5 * 1024 * 1024)) // 5MB max
            using (var fs = File.Create(logoPath))
            {
                await stream.CopyToAsync(fs);
            }
            LogoUploadMessage = "Logo uploaded successfully!";
        }
        catch (Exception ex)
        {
            LogoUploadError = $"Error uploading logo: {ex.Message}";
        }
        SelectedLogoFile = null;
    }

    private async Task LoadCustomCss()
    {
        CssMessage = null;
        CssError = null;
        try
        {
            var cssPath = Path.Combine(Environment.WebRootPath, "css", "custom.css");
            if (File.Exists(cssPath))
            {
                CustomCssContent = await File.ReadAllTextAsync(cssPath);
            }
            else
            {
                CustomCssContent = "/* Add your custom CSS styles here */";
            }
        }
        catch (Exception ex)
        {
            CssError = $"Error loading CSS: {ex.Message}";
        }
    }

    private async Task SaveCss()
    {
        CssMessage = null;
        CssError = null;
        try
        {
            var cssFolder = Path.Combine(Environment.WebRootPath, "css");
            Directory.CreateDirectory(cssFolder); // Ensure directory exists
            var cssPath = Path.Combine(cssFolder, "custom.css");
            await File.WriteAllTextAsync(cssPath, CustomCssContent);
            CssMessage = "CSS saved successfully!";
        }
        catch (Exception ex)
        {
            CssError = $"Error saving CSS: {ex.Message}";
        }
    }

    private async Task ReloadCss()
    {
        await LoadCustomCss();
    }
}